<?php

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Entity\Element\EntityAutocomplete;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Serialization\Yaml;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\webform\EntitySettings\WebformEntitySettingsGeneralForm;

function wagam_webform_form_alter(&$form, FormStateInterface $form_state)
{
    if($form['#id'] === 'webform-settings-form'){
        /** @var WebformEntitySettingsGeneralForm */
        $formObject = $form_state->getFormObject();
        /** @var Webform */
        $entity = $formObject->getEntity();
        $additional_fields = _wagam_webform_get_additional_form($entity);

        $form['general_settings']['branche'] = $additional_fields['branche'];
        $form['general_settings']['niveau_cible'] = $additional_fields['niveau_cible'];
        $form['general_settings']['temps_estime'] = $additional_fields['temps_estime'];
        $form['general_settings']['related_lesson'] = $additional_fields['related_lesson'];


        $form['general_settings']['category']['#access'] = FALSE;
        $form['general_settings']['title']['#weight'] = 0;
        $form['general_settings']['branche']['#weight'] = 1;
        $form['general_settings']['niveau_cible']['#weight'] = 2;
        $form['general_settings']['description']['#weight'] = 3;
        $form['general_settings']['results_disabled']['#weight'] = 4;
        $form['general_settings']['archive']['#weight'] = 5;

        $form['actions']['submit']['#submit'][] = '_wagam_webform_additional_general_settings';
    }elseif(preg_match('/^webform-add-form--.*/', $form['#id'])){
        /** @var WebformEntitySettingsGeneralForm */
        $formObject = $form_state->getFormObject();
        /** @var Webform */
        $entity = $formObject->getEntity();
        $additional_fields = _wagam_webform_get_additional_form($entity);

        $form['branche'] = $additional_fields['branche'];
        $form['niveau_cible'] = $additional_fields['niveau_cible'];
        $form['temps_estime'] = $additional_fields['temps_estime'];
        $form['related_lesson'] = $additional_fields['related_lesson'];


      $form['actions']['submit']['#submit'][] = '_wagam_webform_additional_general_settings';
    }elseif(isset($form['#quiz']) && $form['#form_id'] == 'quiz_question_answering_form'){

        // dd($form);
        foreach($form['question'] as $key => &$question){
            if($key % 2 == 0 && !array_search('quiz-question-page', $question['#attributes']['class'], true)){
                // dd($question);
                $question['#attributes']['class'][] = 'bg-question';
            }

            $question['#attributes']['class'][] = 'first-lvl-element';
        }
    }
}

function _wagam_webform_get_additional_form($entity)
{
    $terms = _wagam_webform_load_terms_of('branche_mathematiques');
    $branche_options = [];
    /** @var Term $term */
    foreach($terms as $term){
        $branche_options[$term->id()] = $term->getName();
    }

    $form['branche'] = [
        '#type' => 'select',
        '#title' => 'Branche mathématiques',
        '#default_value' => $entity->getThirdPartySetting('wagam_webform', 'branche'),
        '#options' => $branche_options,
        '#empty_option' => '-- Choisir une branche --',
        '#required' => TRUE,
    ];

    $terms = _wagam_webform_load_terms_of('niveau_scolaire');
    $niveau_options = [];
    /** @var Term $term */
    foreach($terms as $term){
        $niveau_options[$term->id()] = $term->getName();
    }

    $form['niveau_cible'] = [
        '#type' => 'select',
        '#title' => 'Niveau du questionnaire.',
        '#default_value' => $entity->getThirdPartySetting('wagam_webform', 'niveau_cible'),
        '#options' => $niveau_options,
        '#empty_option' => '-- Choisir un niveau --',
        '#required' => TRUE,
    ];

    $form['temps_estime'] = [
      '#type' => 'number',
      '#title' => t('Temps estimé (en minutes)'),
      '#default_value' => $entity->getThirdPartySetting('wagam_webform', 'temps_estime'),
      '#required' => TRUE,
    ];

    $lesson = $entity->getThirdPartySetting('wagam_webform', 'related_lesson');
    if(!empty($lesson)){
        $node_lesson = Node::load($lesson);
    }
    $form['related_lesson'] = [
        '#type' => 'entity_autocomplete',
        '#target_type' => 'node',
        '#default_value' => $node_lesson ?? NULL,
        '#title' => t('Chapitre ou Leçon associée'),
        '#description' => t('Associer un chapitre ou une leçon à cet exercice afin de la guider l\'utisateur.'),
        '#required' => TRUE,
    ];

    return $form;
}

function _wagam_webform_load_terms_of($taxonomie)
{
    $entity_manager = \Drupal::service('entity_type.manager');
    $term_storage = $entity_manager->getStorage('taxonomy_term');

    return $term_storage->loadByProperties([
        'vid' => $taxonomie,
    ]);
}

function _wagam_webform_additional_general_settings(&$form, FormStateInterface $form_state)
{
    /** @var WebformEntitySettingsGeneralForm */
    $formObject = $form_state->getFormObject();
    if ($formObject->getEntity()) {
        /** @var Webform */
        $entity = $formObject->getEntity();
        $entity->setThirdPartySetting('wagam_webform', 'branche', $form_state->getValue('branche'));
        $entity->setThirdPartySetting('wagam_webform', 'niveau_cible', $form_state->getValue('niveau_cible'));
        $entity->setThirdPartySetting('wagam_webform', 'temps_estime', $form_state->getValue('temps_estime'));

        $related = EntityAutocomplete::extractEntityIdFromAutocompleteInput($form_state->getValue('related_lesson'));
        if(empty($related)){
            $related = $form_state->getValue('related_lesson');
        }
        $entity->setThirdPartySetting('wagam_webform', 'related_lesson', $related);

        $entity->save();
    }
}

function wagam_webform_preprocess_webform_submission_navigation(&$variables)
{
    // dd($variables);

    /** @var WebformSubmission $submission */
    $submission = $variables['webform_submission'];
    $webform = $submission->getWebform();

    //Traitement du header de submission.
    _process_submission_header($variables, $webform, $submission);

    $variables['#attached']['library'][] = 'wagam_webform/wagam_webform.submission';
}

function wagam_webform_preprocess_webform_submission(&$variables)
{
    //Traitement de la correction des questions
    // dd($variables);

    /** @var Webform */
    $webform = $variables['webform'];
    /** @var WebformSubmission */
    $submission = $variables['webform_submission'];
    $flatten_elements = $webform->getElementsInitializedAndFlattened();
    // dd($flatten_elements);

    $submission_correction = [];

    $current_container = '';

    $entity_manager = \Drupal::entityTypeManager();
    foreach($flatten_elements as $key => $element)
    {
        if($element['#type'] === 'webform_wizard_page')
        {
            $submission_correction[$key] = [
                '#type' => 'container',
                '#attributes' => [
                    'class' => [
                        'row',
                        'question-wrapper',
                        count($submission_correction) > 0 ? 'd-none' : 'current-question',
                    ],
                ],
            ];
            $current_container = $key;
        }

        if($element['#type'] === 'webform_entity_view'){
            $entity = $entity_manager->getStorage($element['#target_type'])->load($element['#selected_entity']);
            if($entity instanceof Media){
                $viewable_media = $entity_manager->getViewBuilder('media')->view($entity, 'default');
                $submission_correction[$current_container][$key] = [
                    '#type' => 'container',
                    '#attributes' => [
                        'class' => [
                            'col-12',
                            'col-md-6',
                        ],
                    ],
                    'content' => $viewable_media,
                ];
            }
        }

        //Texte riche
        if($element['#type'] === 'processed_text')
        {
            $submission_correction[$current_container][$key] = [
                '#type' => 'container',
                '#attributes' => [
                    'class'  => [
                        'col-12',
                        'col-md-6',
                        'ennonce-wrapper',
                    ],
                ],
                'title' => ['#markup' => new FormattableMarkup('<h2 class="@classes">Énnoncé</h2>', ['@classes' => 'question-title'])],
                'content' => $element,
            ];
        }

        if($element['#type'] === 'webform_markup'){
            $submission_correction[$current_container][$key] = [
                '#type' => 'container',
                '#attributes' => [
                    'class'  => [
                        'col-12',
                        'col-md-6',
                        'ennonce-wrapper',
                    ],
                ],
                'title' => ['#markup' => '<h2>Énnoncé</h2>'],
                'content' =>[
                    '#markup' => $element['#markup'],
                ],
            ];
        }

        //Element
        if($element['#type'] === 'webform_score_radios'){

            $correct_answer = $element['#webform_score_plugin_configuration']['expected'];
            $title = new FormattableMarkup('<h2 class="@classes">@title</h2>', ['@classes' => 'user-prop-title', '@title' => t('Réponses')]);
            $submission_correction[$current_container][$key] = [
                '#type' => 'container',
                '#attributes' => [
                    'class' => [
                        'user-prop',
                        'col-12',
                        'col-md-8',
                        'offset-md-2',
                    ],
                ],
                'title' => [
                    '#markup' => $title->__toString(),
                ],
                'content' => [
                    '#type' => 'html_tag',
                    '#tag' => 'ul',
                    '#attributes' => [
                        'class' => [
                            'answer-list',
                        ],
                    ],
                    'items' => [],
                ],
            ];


            foreach($element['#options'] as $prop_val => $prop){
                $classes = [];
                if($prop_val === $submission->getData()[$key]){
                    $classes[] = 'user-answer';
                }
                if($prop_val == $correct_answer){
                    $classes[] = 'correct-answer';
                }
                $prop_markup = new FormattableMarkup('@text', ['@text' => $prop]);
                $submission_correction[$current_container][$key]['content']['items'][] = [
                    '#type' => 'html_tag',
                    '#tag' => 'li',
                    '#attributes' => [
                        'class' => $classes,
                    ],
                    'content' => [
                        '#markup' => $prop_markup,
                    ],
                ];

            }
        }
    }

    $variables['correction'] = $submission_correction;

}

/**
 * Traitement des informations du headear de webform.
 */
function _process_submission_header(&$variables, $webform, $submission){
    $score = $submission->get('webform_score')->first();
    $score_markup = new FormattableMarkup('<span class="numerator">@num</span><span class="denominator">@denom</span>', ['@num' => $score->numerator, '@denom' => $score->denominator]);

    $variables['nb_questions'] = count(Yaml::decode($webform->get('elements')));
    $variables['back_button'] = [
        '#title' => 'Retour au recapitulatif',
        '#type' => 'link',
        '#attributes' => [
            'class' => [
              'btn',
              'btn-primary',
              'back-recap',
            ],
        ],
        '#url' => Url::fromRoute('wagam.form_overview', ['webform' => $variables['webform_id']]),
    ];
    $variables['previous_question_button'] = [
        '#type' => 'html_tag',
        '#tag' => 'button',
        '#attributes' => [
            'class' => [
                'btn',
                'btn-prev',
                'd-none',
            ],
            'id' => 'previous-quest-action',
        ],
        'content' => [
            '#markup' => 'Question précédente',
        ],
    ];

    $variables['next_question_button'] = [
        '#type' => 'html_tag',
        '#tag' => 'button',
        '#attributes' => [
            'class' => [
                'btn',
                'btn-next',
            ],
            'id' => 'next-quest-action',
        ],
        'content' => [
            '#markup' => 'Question suivante',
        ],
    ];

    $variables['score'] = $score_markup;
}

function wagam_webform_preprocess_quiz_result(&$variables){
    // dd($variables);
    /** @var \Drupal\quiz\Entity\QuizResult $quiz_result */
    $quiz_result = $variables['quiz_result'];
    $quiz = $quiz_result->getQuiz();
    $score = $quiz_result->score();

    foreach($variables['content']['questions'] as $key => $question){
        if($key != '#weight'){
            $render = [
                '#type' => 'container',
                '#attributes' => [
                    'class' => [
                        'row',
                        'question-wrapper',
                        $key != array_key_first($variables['content']['questions']) ? 'd-none' : 'current-question',
                    ]
                ],
                'question' => $question,
            ];

            $variables['content']['questions'][$key] = $render;
        }
    }

    $variables['content']['heading'] = [
        '#type' => 'container',
        '#attributes' => [
            'class' => [
                'row',
                'quiz-navigation-header',
            ],
        ],
        'controls' => [
            '#type' => 'container',
            '#attributes' => [
                'class' => [
                    'row'
                ],
            ],
            'back' => [
                '#type' => 'container',
                '#attributes' => [
                    'class' => [
                        'back-area',
                        'col-6',
                    ],
                ],
                'btn' => [
                    '#title' => 'Retour au recap',
                    '#type' => 'link',
                    '#attributes' => [
                        'class' => [
                            'btn',
                            'btn-primary',
                            'back-recap',
                        ],
                    ],
                    '#url' => Url::fromRoute('entity.quiz.canonical', ['quiz' => $quiz->id()]),
                ]
            ],
            'steps' =>[
                '#type' => 'container',
                '#attributes' => [
                    'class' => [
                        'col-6',
                        'text-align-right',
                    ],
                ],
                'previous' => [
                    '#type' => 'html_tag',
                    '#tag' => 'button',
                    '#attributes' => [
                        'class' => [
                            'btn',
                            'btn-prev',
                            'd-none',
                        ],
                        'id' => 'previous-quest-action',
                    ],
                    'content' => [
                        '#markup' => 'Question précédente',
                    ],
                ],
                'next' => [
                    '#type' => 'html_tag',
                    '#tag' => 'button',
                    '#attributes' => [
                        'class' => [
                            'btn',
                            'btn-next',
                        ],
                        'id' => 'next-quest-action',
                    ],
                    'content' => [
                        '#markup' => 'Question suivante',
                    ],
                ],
            ],
        ],
        'title' => [
            '#markup' => new FormattableMarkup('<h1 class="submission-title">Correction de @title </h1>', ['@title' => $quiz->get('title')->first()->getString()]),
        ],
        'state-area' => [
            '#type' => 'container',
            '#attributes' => [
                'class' => [
                    'state-area',
                    'col-6',
                    'col-md-2',
                    'offset-md-4',
                    'text-align-center'
                ],
            ],
            'state' => [
                '#markup' =>  new FormattableMarkup('<p class="state">Question <span class="current">@current</span> sur @total</p>', ['@current' => 1, '@total' => $score['possible_score']]),
            ],
        ],
        'score-area' => [
            '#type' => 'container',
            '#attributes' => [
                'class' => [
                    'score-area',
                    'col-6',
                    'col-md-2',
                ],
            ],
            'content' => [
                '#markup' => new FormattableMarkup('<p class="score">Mon score : <span class="numerator">@num</span><span class="denominator">@den</span></p>', ['@num' => $score['numeric_score'],'@den' => $score['possible_score']]),
            ],
        ],
        '#weight' => 0,
    ];
    // dd($score);
    $variables['content_attributes'][] = 'quiz-submission';
    if(isset($variables['content']['score'])){
        unset($variables['content']['score']);
    }

    //Javascript libs
    $variables['#attached']['library'][] = 'wagam_webform/wagam_webform.submission';
}

function wagam_webform_preprocess_quiz(&$variables){
    //Quiz result
    // dd(\Drupal::routeMatch()->getRouteName());
    // dd($variables);
}